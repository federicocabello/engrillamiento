
package engrillar;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;


/**
 *
 * @author fedec
 */
public class inicio extends javax.swing.JFrame {

    /** Creates new form inicio */
    public inicio() {
        initComponents();
        jLabel2.setVisible(false);
        jButton2.setVisible(false);
        jButton3.setVisible(false);
        jButton4.setVisible(false);
        jLabel3.setVisible(false);
        jLabel1.setVisible(false);
        jTextField1.setVisible(false);
        jButton1.requestFocus();
        this.setLocationRelativeTo(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CADPO | GRILLAS");

        jButton1.setText("Cargar archivo de qualy");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Clasificación:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setBackground(new java.awt.Color(0, 255, 0));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setText("Engrillar 2 SERIES");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(237, 148, 30));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setText("Engrillar 3 SERIES");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(51, 255, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setText("Grilla INVERTIDA");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(255, 0, 0));
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Lastres:");

        jButton5.setText("Cargar archivo de lastres");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Vueltas:");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(255, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)))
        );

        pack();
    }//GEN-END:initComponents
    private void loadIniData() {
          try {
              // Ruta del archivo .ini
              String filePath = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\BatchTemplateQ1.ini";

              // Leer el archivo .ini
              BufferedReader reader = new BufferedReader(new FileReader(filePath));
              String line;
              StringBuilder content = new StringBuilder();
              int lineCount = 0;

              // Leer línea por línea y agregarla al StringBuilder
              while ((line = reader.readLine()) != null) {
                  lineCount++;
                                  if (lineCount >= 4) {
                                      line = line.replace("/editgrid 1 ", "01 ");
                                      line = line.replace("/editgrid 2 ", "02 ");
                                      line = line.replace("/editgrid 3 ", "03 ");
                                      line = line.replace("/editgrid 4 ", "04 ");
                                      line = line.replace("/editgrid 5 ", "05 ");
                                      line = line.replace("/editgrid 6 ", "06 ");
                                      line = line.replace("/editgrid 7 ", "07 ");
                                      line = line.replace("/editgrid 8 ", "08 ");
                                      line = line.replace("/editgrid 9 ", "09 ");
                                      line = line.replace("/editgrid ", "");
                                      content.append(line).append("\n");
                                      
                                  }
              }

              // Mostrar el contenido en el textarea
              jTextArea1.setText(content.toString());

              // Cerrar el lector
              reader.close();
          } catch (Exception e) {
              e.printStackTrace();
              JOptionPane.showMessageDialog(this, "Error al cargar los datos del archivo .ini", "Error", JOptionPane.ERROR_MESSAGE);
          }
      }

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jLabel2.setVisible(true);
        jButton2.setVisible(true);
        jButton3.setVisible(true);
        jButton4.setVisible(true);
        jLabel1.setVisible(true);
        jLabel3.setVisible(true);
        jTextField1.setVisible(true);
        jTextField1.requestFocus();
        loadIniData();
        cargarLastres();
    }//GEN-LAST:event_jButton1ActionPerformed
    private void saveToIniFile() {
        try {
            // Ruta del nuevo archivo .ini
            String newFilePath = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\invertida.ini";

            // Obtener el contenido del textarea
            String content = jTextArea1.getText();
            String vueltas = jTextField1.getText();
            String[] lines = content.split("\n");

                    // Invertir el orden de las líneas
                    StringBuilder reversedContent = new StringBuilder();
                    int lineNumber = 1;
                    for (int i = lines.length - 1; i >= 0; i--) {
                        String line = lines[i];
                        if (line.length() >= 3) {
                            line = "/editgrid " + lineNumber + line.substring(2); // Tomar a partir del tercer carácter
                            lineNumber++;
                        }
                        reversedContent.append(line).append("\n");
                    }
            reversedContent.append("\n").append("/racelength 3 "+vueltas);
            reversedContent.append("\n").append("/batch kilos.ini");
            BufferedWriter writer = new BufferedWriter(new FileWriter(newFilePath));
            writer.write(reversedContent.toString());

            // Cerrar el escritor
            writer.close();
            JOptionPane.showMessageDialog(null, "El archivo de GRILLA INVERTIDA fue creado con éxito.","ARCHIVO CREADO",JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo .ini", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        saveToIniFile();
    }//GEN-LAST:event_jButton4ActionPerformed
    private void cargarLastres() {
          try {
              // Ruta del archivo .ini
              String filePath = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\kilos.ini";
              String vueltas = jTextField1.getText();
              // Leer el archivo .ini
              BufferedReader reader = new BufferedReader(new FileReader(filePath));
              String line;
              StringBuilder content = new StringBuilder();
              int lineCount = 0;

              // Leer línea por línea y agregarla al StringBuilder
              while ((line = reader.readLine()) != null) {
                lineCount++;
                line = line.replace("/setmass ", "");
                line = line.toUpperCase();
                content.append(line).append("\n");
                                      
              }
              // Mostrar el contenido en el textarea
              jTextArea2.setText(content.toString());

              // Cerrar el lector
              reader.close();
              } catch (Exception e) {
              e.printStackTrace();
              JOptionPane.showMessageDialog(this, "Error al cargar los datos del archivo .ini", "Error", JOptionPane.ERROR_MESSAGE);
          }
      }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        jLabel3.setVisible(true);
        cargarLastres();
    }//GEN-LAST:event_jButton5ActionPerformed
    private void tresSeries() {
        try {
//SERIE 1
            // Ruta del nuevo archivo .ini
            String serie1 = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s1.ini";

            // Obtener el contenido del textarea
            String content = jTextArea1.getText();
            String vueltas = jTextField1.getText();
            String[] lines = content.split("\n");

                    // Invertir el orden de las líneas
                    StringBuilder contenido1 = new StringBuilder();
                    int lineNumber = 1;
                        for (int i = 0; i < lines.length; i += 3) {
                        String line = lines[i];
                        if (line.length() >= 3) {
                            line = "/editgrid " + lineNumber + line.substring(2); // Tomar a partir del tercer carácter
                            lineNumber++;
                        }
                        contenido1.append(line).append("\n");
                    }
            contenido1.append("\n").append("/racelength 3 "+vueltas);
            contenido1.append("\n").append("/batch kilos.ini");
            BufferedWriter writer = new BufferedWriter(new FileWriter(serie1));
            writer.write(contenido1.toString());

            // Cerrar el escritor
            writer.close();
//SERIE 2
            String serie2 = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s2.ini";

                    // Invertir el orden de las líneas
                    StringBuilder contenido2 = new StringBuilder();
                    int lineNumber2 = 1;
                        for (int i = 1; i < lines.length; i += 3) {
                        String line = lines[i];
                        if (line.length() >= 3) {
                            line = "/editgrid " + lineNumber2 + line.substring(2); // Tomar a partir del tercer carácter
                            lineNumber2++;
                        }
                        contenido2.append(line).append("\n");
                    }
            
            contenido2.append("\n").append("/racelength 3 "+vueltas);
            contenido2.append("\n").append("/batch kilos.ini");
            BufferedWriter writer2 = new BufferedWriter(new FileWriter(serie2));
            writer2.write(contenido2.toString());

            // Cerrar el escritor
            writer2.close();
//SERIE 3
            String serie3 = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s3.ini";

                    // Invertir el orden de las líneas
                    StringBuilder contenido3 = new StringBuilder();
                    int lineNumber3 = 1;
                        for (int i = 2; i < lines.length; i += 3) {
                        String line = lines[i];
                        if (line.length() >= 3) {
                            line = "/editgrid " + lineNumber3 + line.substring(2); // Tomar a partir del tercer carácter
                            lineNumber3++;
                        }
                        contenido3.append(line).append("\n");
                    }
            
            contenido3.append("\n").append("/racelength 3 "+vueltas);
            contenido3.append("\n").append("/batch kilos.ini");
            BufferedWriter writer3 = new BufferedWriter(new FileWriter(serie3));
            writer3.write(contenido3.toString());

            // Cerrar el escritor
            writer3.close();
            //JOptionPane.showMessageDialog(this, "Archivos .ini guardado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo .ini", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    public static void tresSeriesCartel() {
            try {


                // Ruta al archivo .ini
                String rutaArchivoIni = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s1.ini";;
                
                // Crear un lector de archivos
                BufferedReader br = new BufferedReader(new FileReader(rutaArchivoIni));

                String linea;
                           StringBuilder resultado = new StringBuilder("<html>"); // Iniciar con <html>
                           resultado.append("SERIE 1:").append("<br>");
                           while ((linea = br.readLine()) != null) {
                               // Comprobar que la línea tiene al menos 10 caracteres y comienza con "/editgrid"
                               if (linea.length() >= 10 && linea.startsWith("/editgrid")) {
                                   // Obtener el valor a partir del décimo carácter
                                   String valor = linea.substring(9); // Índice 9 corresponde al décimo carácter (0-indexed)
                                   resultado.append(valor).append("<br>"); // Agregar el valor y una etiqueta <br> para el salto de línea
                               }
                           }
                           resultado.append("</html>"); // Cerrar con </html>

                           // Mostrar el resultado en el JLabel
                           Mostrar.jLabel1.setText(resultado.toString());

                // Cerrar el lector de archivos
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {


                // Ruta al archivo .ini
                String rutaArchivoIni = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s2.ini";;
                
                // Crear un lector de archivos
                BufferedReader br = new BufferedReader(new FileReader(rutaArchivoIni));

                String linea;
                           StringBuilder resultado = new StringBuilder("<html>"); // Iniciar con <html>
                           resultado.append("SERIE 2:").append("<br>");
                           while ((linea = br.readLine()) != null) {
                               // Comprobar que la línea tiene al menos 10 caracteres y comienza con "/editgrid"
                               if (linea.length() >= 10 && linea.startsWith("/editgrid")) {
                                   // Obtener el valor a partir del décimo carácter
                                   String valor = linea.substring(9); // Índice 9 corresponde al décimo carácter (0-indexed)
                                   resultado.append(valor).append("<br>"); // Agregar el valor y una etiqueta <br> para el salto de línea
                               }
                           }
                           resultado.append("</html>"); // Cerrar con </html>

                           // Mostrar el resultado en el JLabel
                           Mostrar.jLabel2.setText(resultado.toString());

                // Cerrar el lector de archivos
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {


                // Ruta al archivo .ini
                String rutaArchivoIni = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s3.ini";;
                
                // Crear un lector de archivos
                BufferedReader br = new BufferedReader(new FileReader(rutaArchivoIni));

                String linea;
                           StringBuilder resultado = new StringBuilder("<html>"); // Iniciar con <html>
                           resultado.append("SERIE 3:").append("<br>");
                           while ((linea = br.readLine()) != null) {
                               // Comprobar que la línea tiene al menos 10 caracteres y comienza con "/editgrid"
                               if (linea.length() >= 10 && linea.startsWith("/editgrid")) {
                                   // Obtener el valor a partir del décimo carácter
                                   String valor = linea.substring(9); // Índice 9 corresponde al décimo carácter (0-indexed)
                                   resultado.append(valor).append("<br>"); // Agregar el valor y una etiqueta <br> para el salto de línea
                               }
                           }
                           resultado.append("</html>"); // Cerrar con </html>

                           // Mostrar el resultado en el JLabel
                           Mostrar.jLabel3.setText(resultado.toString());

                // Cerrar el lector de archivos
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        tresSeries();
        Mostrar cartel = new Mostrar();
        cartel.setLocationRelativeTo(null);
        cartel.setVisible(true);
        tresSeriesCartel();
    }//GEN-LAST:event_jButton3ActionPerformed
    private void dosSeries() {
        try {
    //SERIE 1
            // Ruta del nuevo archivo .ini
            String serie1 = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s1.ini";

            // Obtener el contenido del textarea
            String content = jTextArea1.getText();
            String vueltas = jTextField1.getText();
            String[] lines = content.split("\n");

                    // Invertir el orden de las líneas
                    StringBuilder contenido1 = new StringBuilder();
                    int lineNumber = 1;
                        for (int i = 0; i < lines.length; i += 2) {
                        String line = lines[i];
                        if (line.length() >= 3) {
                            line = "/editgrid " + lineNumber + line.substring(2); // Tomar a partir del tercer carácter
                            lineNumber++;
                        }
                        contenido1.append(line).append("\n");
                    }
            
            contenido1.append("\n").append("/racelength 3 "+vueltas);
            contenido1.append("\n").append("/batch kilos.ini");
            BufferedWriter writer = new BufferedWriter(new FileWriter(serie1));
            writer.write(contenido1.toString());

            // Cerrar el escritor
            writer.close();
    //SERIE 2
            String serie2 = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s2.ini";

                    // Invertir el orden de las líneas
                    StringBuilder contenido2 = new StringBuilder();
                    int lineNumber2 = 1;
                        for (int i = 1; i < lines.length; i += 2) {
                        String line = lines[i];
                        if (line.length() >= 3) {
                            line = "/editgrid " + lineNumber2 + line.substring(2); // Tomar a partir del tercer carácter
                            lineNumber2++;
                        }
                        contenido2.append(line).append("\n");
                    }
            
            contenido2.append("\n").append("/racelength 3 "+vueltas);
            contenido2.append("\n").append("/batch kilos.ini");
            BufferedWriter writer2 = new BufferedWriter(new FileWriter(serie2));
            writer2.write(contenido2.toString());

            // Cerrar el escritor
            writer2.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo .ini", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    public static void dosSeriesCartel() {
            try {


                // Ruta al archivo .ini
                String rutaArchivoIni = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s1.ini";;
                
                // Crear un lector de archivos
                BufferedReader br = new BufferedReader(new FileReader(rutaArchivoIni));

                String linea;
                           StringBuilder resultado = new StringBuilder("<html>"); // Iniciar con <html>
                           resultado.append("SERIE 1:").append("<br>");
                           while ((linea = br.readLine()) != null) {
                               // Comprobar que la línea tiene al menos 10 caracteres y comienza con "/editgrid"
                               if (linea.length() >= 10 && linea.startsWith("/editgrid")) {
                                   // Obtener el valor a partir del décimo carácter
                                   String valor = linea.substring(9); // Índice 9 corresponde al décimo carácter (0-indexed)
                                   resultado.append(valor).append("<br>"); // Agregar el valor y una etiqueta <br> para el salto de línea
                               }
                           }
                           resultado.append("</html>"); // Cerrar con </html>

                           // Mostrar el resultado en el JLabel
                           Mostrar.jLabel1.setText(resultado.toString());

                // Cerrar el lector de archivos
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {


                // Ruta al archivo .ini
                String rutaArchivoIni = "X:\\[CADPO 2024]\\UserData\\LOG\\Results\\s2.ini";;
                
                // Crear un lector de archivos
                BufferedReader br = new BufferedReader(new FileReader(rutaArchivoIni));

                String linea;
                           StringBuilder resultado = new StringBuilder("<html>"); // Iniciar con <html>
                           resultado.append("SERIE 2:").append("<br>");
                           while ((linea = br.readLine()) != null) {
                               // Comprobar que la línea tiene al menos 10 caracteres y comienza con "/editgrid"
                               if (linea.length() >= 10 && linea.startsWith("/editgrid")) {
                                   // Obtener el valor a partir del décimo carácter
                                   String valor = linea.substring(9); // Índice 9 corresponde al décimo carácter (0-indexed)
                                   resultado.append(valor).append("<br>"); // Agregar el valor y una etiqueta <br> para el salto de línea
                               }
                           }
                           resultado.append("</html>"); // Cerrar con </html>

                           // Mostrar el resultado en el JLabel
                           Mostrar.jLabel2.setText(resultado.toString());

                // Cerrar el lector de archivos
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            Mostrar.jLabel3.setVisible(false);
        }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dosSeries();
        Mostrar cartel = new Mostrar();
        cartel.setLocationRelativeTo(null);
        cartel.setVisible(true);
        dosSeriesCartel();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // TODO add your handling code here:
        char karakter = evt.getKeyChar();
        if(!(((karakter >= '0') && (karakter <= '9') || (karakter == KeyEvent.VK_BACK_SPACE) || (karakter == KeyEvent.VK_DELETE)))){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing
                                                                   .UIManager
                                                                   .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing
                         .UIManager
                         .setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util
                .logging
                .Logger
                .getLogger(inicio.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util
                .logging
                .Logger
                .getLogger(inicio.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util
                .logging
                .Logger
                .getLogger(inicio.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util
                .logging
                .Logger
                .getLogger(inicio.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt
            .EventQueue
            .invokeLater(new Runnable() {
                public void run() {
                    new inicio().setVisible(true);
                }
            });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
